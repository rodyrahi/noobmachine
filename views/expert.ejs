<!DOCTYPE html>
<html lang="en">

<%- include('./partials/header.ejs') %>


<style>

.noob-heading {
      font-family: 'Oswald', sans-serif;
    }



.form-control , .form-select{
  border: 2px black solid;


}




</style>
<body class="bg-dark">
  <div class="container">

    <h1 class="text-light m-2 mb-1 noob-heading">NOOB MACHINE</h1>
    <p class="text-light m-2 my-1">ARTIFICIAL NEURAL NETWORK</p>

    <div class="row">

      <div class="col-md-3">

        <div class=" bg-white p-2 mt-3 shadow" style="border: 3px black solid;border-radius:10px;">
          <input class="" style="display: none;" type="file" id="csvFile" accept=".csv" onchange="getname()">

          <div class="mb-2  p-2" style="border: 2px black solid;border-radius: 10px;">
            <button class="btn btn-success" style="border: 2px black solid;" onclick="getcsv()">UPLOAD .csv</button>
            <br>

            <h5 id="file" >Select A File</h5>

          </div>
          <hr>
          <h3>Prediction Parameter</h3>


          <div class="mb-1 d-flex " >
            <select class="form-select" oninput="changePredictParam()" id="predict-param" style="margin-right: 2.1rem;" id="activation">
   
            </select>
          </div>


          <h3>Layers</h3>
          <div id="layer-container">
            <div id="layers" >
              <div class="mb-1 d-flex ">
                <input class="form-control me-2" id="units" type="number" class="Neurons" placeholder="neurons">
                <select class="form-select" style="margin-right: 2.1rem;" id="activation">
                  <option value="sigmoid">Sigmoid</option>
                  <option selected value="relu">ReLU</option>
                  <option value="tanh">Tanh</option>
                </select>
              </div>
            </div>
            </div>
          <div class="mb-2">

            <button class="btn btn-primary btn-sm" style="border: 2px black solid;border-radius: 10px;" onclick="addlayers()">Add Layers</button>
          </div>

          
        </div>

        <div class=" bg-white p-2 mt-3 shadow" style="border: 3px black solid;border-radius: 10px;">

        <h3 data-bs-toggle="collapse" href="#Advanced" role="button" aria-expanded="false" aria-controls="Advanced" >Advanced</h3> 
        
        


          <div class="collapse" id="Advanced">
          <input type="number" style="display: none;" min="2" oninput="createInputs()" value="2" class="form-control" id="inputshape" placeholder="Number Of Input Shape" >

          <div class="mb-2">
            <label for="learningRate">LearningRate</label>

            <input type="number" step="0.01" value="0.01" class="form-control" id="learningRate">
          </div>
          <div class="mb-2">
            <label for="epochs">Epochs(Cycles)</label>
            <input type="number" step="1" value="1000" class="form-control" id="epochs">
          </div>

          <div class="mb-2">
            <label for="lossFunctionSelect">Loss Function</label>

            <select class="form-select" id="lossFunctionSelect">
              <option selected value="meanSquaredError">Mean Squared Error</option>
              <option value="mean_absolute_error">Mean Absolute Error</option>
              <option value="mean_absolute_percentage_error">Mean Absolute Percentage Error</option>
            </select>
          </div>

          <div class="mb-2">
            <label for="algorithmSelect">Traning Algorithm</label>

            <select class="form-select" id="algorithmSelect">
              <option value="sgd">Stochastic Gradient Descent (SGD)</option>
              <option value="adam">Adam</option>
              <option value="rmsprop">RMSprop</option>
              <!-- Add more training algorithms as needed -->
            </select>
          </div>


          </div>
        </div>

      </div>
      

      <div class="col-md-3">
        <div class=" bg-white p-2 mt-3 shadow" style="border: 3px black solid;border-radius: 10px;">
          

          
          <h3>Parameters</h3>
          <div id="params" class=""></div>

          <hr>
          <h3 class=" mb-2" id="prediction"></h3>
          <button class="btn btn-warning disabled btn-lg" id="predict" style="border: 2px black solid;border-radius: 10px;" onclick="processCSV()">PREDICT</button>
        </div>

      </div>

      <!-- <div class="col-md-3">

      </div> -->

      <div class="col-md-6">

        <div class=" bg-white p-2 mt-3 shadow" style="border: 3px black solid;border-radius: 10px;">
          <h3>Visualization</h3>
          <canvas class=""  id="barChart" style=""></canvas>
          <canvas class=""  id="lineGraph" style=""></canvas>

        </div>
      </div>


    
    </div>

</div>



</body>

<script src="expertmodel.js"></script>
<script>

  function updateRangeValue() {
    const rangeInput = document.getElementById('learningRate');
    const rangeValue = document.getElementById('rangeValue');
    rangeValue.textContent = rangeInput.value;
  }



  function addlayers() {
    const layersContainer = document.getElementById('layer-container');

    const newLayerDiv = document.createElement('div');
    newLayerDiv.innerHTML = `
      <div class="mb-1 d-flex">
        <input class="form-control me-2 units" type="number" placeholder="Neurons">
        <select class="form-select activation">
          <option value="sigmoid">Sigmoid</option>
          <option selected value="relu">ReLU</option>
          <option value="tanh">Tanh</option>
        </select>
        <i class="fa-solid fa-trash m-2" style="font-size:1.3rem;" onclick="deleteLayer(this)"></i>

      </div>`;

    layersContainer.appendChild(newLayerDiv);
  }

  function deleteLayer(button) {
    const layerDiv = button.parentElement;
    layerDiv.remove();
  }


const layers = [];

function getlayerValues() {
    const layerContainer = document.getElementById('layer-container');
    const units = layerContainer.querySelectorAll('#units');
    const activation = layerContainer.querySelectorAll('#activation');


    units.forEach((unit, index) => {
      const layerData = {};

      const key = unit.id;
      const value = unit.value;

      const key2 = activation[index].id;
      const value2 = activation[index].value;

      layerData[key] = value;
      layerData[key2] = value2;

      layers.push(layerData);
    });

    console.log(layers);
  }




const csvFileInput = document.getElementById('csvFile');
const barChartCtx = document.getElementById('barChart')
const lineGraphCtx = document.getElementById('lineGraph')
let barChart;
let lineGraph;

// Function to create the bar chart
function createBarChart(labels, data) {
  // If a bar chart instance already exists, destroy it before creating a new one
  if (barChart) {
    barChart.destroy();
  }

  barChart = new Chart(barChartCtx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Data',
        data: data,
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
}

// Function to create the line graph
function createLineGraph(labels, data) {
  // If a line graph instance already exists, destroy it before creating a new one
  if (lineGraph) {
    lineGraph.destroy();
  }

  lineGraph = new Chart(lineGraphCtx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'Data',
        data: data,
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
        fill: false
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
}

// Event listener for file input change
csvFileInput.addEventListener('change', (event) => {
  const file = event.target.files[0];

  Papa.parse(file, {
    header: true,
    dynamicTyping: true,
    complete: function(results) {
      const labels = results.meta.fields;
      const data = results.data.map(row => row[labels[0]]);
      createBarChart(labels, data);
      createLineGraph(labels, data);
    }
  });
});


function changePredictParam() {
  
  const fileInput = document.getElementById("csvFile");

  var input = fileInput.files[0];

  if (  fileInput.files.length > 0) {

  }
  const reader = new FileReader();
  reader.onload = function(event) {
    const fileContent = event.target.result;

    const lines = fileContent.split('\n');


    for (let i = 1; i < lines.length; i++) {
        const data = lines[i].split(',').map(parseFloat);
        if (data.some(isNaN)) {
          continue;
        }
        

        const features = data.slice(0,-1);
        const header = lines[0].split(",");

        document.getElementById("inputshape").value = features.length;

  
     
        createInputs(features.length , header)

      }
      // drawANNLayers()
    };

reader.readAsText(fileInput.files[0]);


}





function getname(){


  document.getElementById('predict').classList.remove('disabled')
  const fileInput = document.getElementById("csvFile");
  var input = fileInput.files[0];
  var filename = fileInput.files[0].name;
  document.getElementById("file").innerText = filename;

  if (  fileInput.files.length > 0) {

    // document.getElementById("image-container").classList.add('image-selected');

  }
  const reader = new FileReader();
  reader.onload = function(event) {
    const fileContent = event.target.result;
    




    const lines = fileContent.split('\n');


  
    const labels = lines[0].split(',')
    const layersContainer = document.getElementById('predict-param');


    layersContainer.innerHTML= ''
    labels.forEach(element => {
      if (element) {

          createYSLabels(element);
        }
    });
   

   
    console.log(document.getElementById('predict-param').options[document.getElementById('predict-param').selectedIndex].value);

    for (let i = 1; i < lines.length; i++) {
        const data = lines[i].split(',').map(parseFloat);
        if (data.some(isNaN)) {

          console.log('Invalid data point:', lines[i]);
          continue;
        }
        

        const features = data.slice(0,-1);
        const header = lines[0].split(",");

      
        document.getElementById("inputshape").value = features.length;


        createInputs(features.length , header)

      }
      // drawANNLayers()
    };

reader.readAsText(fileInput.files[0]);

}

function createInputs(inputShape , header) {
  

    const div = document.getElementById('params');
    
    const inputContainer = document.createElement("div");
    inputContainer.classList.add("d-flex", "flex-column", "p-3", "bg-light", "align-items-end");

    // Clear the existing inputs and circles
    div.innerHTML = "";
    inputContainer.innerHTML = "";

    // Create and append the input fields
    for (let index = 0; index <= inputShape; index++) {

      const valueSelect = document.getElementById('predict-param').options[document.getElementById('predict-param').selectedIndex].value
   
      if (header[index].replace(/\s/g, "") !== valueSelect.replace(/\s/g, "")) {
        
        
        const input = document.createElement("input");
        input.type = "text";
        input.id = "input" + index;
        input.className = 'form-control mb-2';
        input.placeholder = header[index];
        div.appendChild(input);
      // document.getElementById('appcols').innerText = div.innerHTML
      }
    }
}


function createYSLabels(header) {
  const layersContainer = document.getElementById('predict-param');


      layersContainer.innerHTML += `<option value="${header}">${header}</option>`;



}



function getcsv() {
  console.log('click');
  const fileInput = document.getElementById("csvFile");
  fileInput.click();

  }
</script>


<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>

</html>
