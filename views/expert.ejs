<!DOCTYPE html>
<html lang="en">

<%- include('./partials/header.ejs') %>

<body>
    <input type="file" id="csvFile" onchange="getname()">
    <input type="number" min="2" oninput="createInputs()" value="2" class="form-control" id="inputshape" placeholder="Number Of Input Shape" >

   <div id="params" ></div> 
    <button onclick="processCSV()"> predict</button>
    <div id="layer-container">
    <div id="layers" >
        <input type="number" id="neurons" placeholder="neurons">
        <input type="text" id="activation" placeholder="activation">
    </div>
    </div>

    <button onclick="addlayers()">add layers</button>
    <button onclick="getlayerValues()">getlayerValues</button>
</body>
<script src="expertmodel.js"></script>
<script>
    function addlayers() {
        const layersContainer = document.getElementById('layer-container');
        
        const newLayerDiv = document.createElement('div');
        newLayerDiv.innerHTML = `
          <input type="number" class="neurons" placeholder="neurons">
          <input type="text" class="activation" placeholder="activation">
        `;
        
        layersContainer.appendChild(newLayerDiv);
      }
      
    function getlayerValues() {
        const layerContainer = document.getElementById('layer-container');
        const inputs = layerContainer.querySelectorAll('input');
        
        const inputValues = [];
        inputs.forEach(input => {
          inputValues.push(input.value);
        });
        
        console.log(inputValues);
      }
      
    function getname(){
      const fileInput = document.getElementById("csvFile");
      var input = fileInput.files[0];
      var filename = fileInput.files[0].name;
      // document.getElementById("file").innerText = filename;

      if (  fileInput.files.length > 0) {

        // document.getElementById("image-container").classList.add('image-selected');

      }
      const reader = new FileReader();
      reader.onload = function(event) {
        const fileContent = event.target.result;
        
        // dfd.readCSV(input) //assumes file is in CWD
        // .then(df => {
        // df.plot("plot_div").table()
        // df.plot("line_div").line()})
              
        const lines = fileContent.split('\n');
        for (let i = 1; i < lines.length; i++) {
            const data = lines[i].split(',').map(parseFloat);
            if (data.some(isNaN)) {

              console.log('Invalid data point:', lines[i]);
              continue;
            }
            
            const features = data.slice(0, -1); // Extract all but the last element as features
            const target = [data[data.length - 1]]; // Last element is the target
            const header = lines[0].split(",");

            document.getElementById("inputshape").value = features.length;
            createInputs(features.length , header)

          }
          // drawANNLayers()
        };

    reader.readAsText(fileInput.files[0]);

  }
    
    function createInputs(inputShape , features) {

        const div = document.getElementById('params');
        
        const inputContainer = document.createElement("div");
        inputContainer.classList.add("d-flex", "flex-column", "p-3", "bg-light", "align-items-end");

        // Clear the existing inputs and circles
        div.innerHTML = "";
        inputContainer.innerHTML = "";

        // Create and append the input fields
        for (let index = 0; index < inputShape; index++) {
          const input = document.createElement("input");
          input.type = "text";
          input.id = "input" + index;
          input.className = 'form-control';
          input.placeholder = features[index];
          div.appendChild(input);
          // document.getElementById('appcols').innerText = div.innerHTML

        }
    }
    


    
</script>