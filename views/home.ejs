<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title> Noob Machine </title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.15.0/dist/tf.min.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP&family=Oswald:wght@600&display=swap" rel="stylesheet">
</head>
<style>
    .noob-heading {
      font-family: 'Oswald', sans-serif;
    }
    .neuron-circle {
  width: 30px;
  height: 30px;
  margin: 1px;
  align-self: center;
}

.neuron-circle svg {
  width: 100%;
  height: 100%;
}

.neuron-circle circle {
  fill: url(#neuron-gradient);
  stroke: #000;
  stroke-width: 1;
}


#neuronContainer {
  height: 90vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-end;
  padding: 30px;
  background-color: #F5F5F5;
  border-radius: 1rem;
}



    .image-container img {
      transition: filter 0.3s ease;
    }

    .image-container:hover img {
      filter: invert(100%);
      cursor: pointer;
    }


</style>
<body style="background-color: black; font-family: 'Noto Sans JP', sans-serif;">
  <div class="container">
    <div class="row">
      
      <h1 class="text-light m-2 mb-1 noob-heading">NOOB MACHINE</h1>
      <p class="text-light m-2 my-1 " >LINEAR REGRESSION</p>
   
      <div class="col-md-6">


        <div class="border p-1 " style="border-radius: 1rem; background-color: white;">
          <!-- Options -->
          
          <div class=" text-center mt-2"  style=" " >
            <div class="image-container" style="display: inline-block;">

     
            <img src="add.png" alt="" srcset="" style="width: 6rem;" onclick="getcsv()">
            <p id="file" >Choose a file</p>
          </div>
          </div>
          
          <input class="m-2" type="file" id="csvFile" onchange="getname()"  accept=".csv" style="display: none;" />

          <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active text-dark " id="london-tab" data-bs-toggle="tab" data-bs-target="#london" type="button" role="tab" aria-controls="london" aria-selected="true">Predict</button>
            </li>
            <li class="nav-item " role="presentation">
              <button class="nav-link text-dark " id="paris-tab" data-bs-toggle="tab" data-bs-target="#paris" type="button" role="tab" aria-controls="paris" aria-selected="false">Advanced</button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link text-dark " id="tokyo-tab" data-bs-toggle="tab" data-bs-target="#tokyo" type="button" role="tab" aria-controls="tokyo" aria-selected="false">Upload Model</button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link text-dark " id="csv-tab" data-bs-toggle="tab" data-bs-target="#csv" type="button" role="tab" aria-controls="csv" aria-selected="false">Csv</button>
            </li>
          </ul>
        
          <!-- Tab content -->
          <div class="tab-content" id="myTabContent">
            <div class="tab-pane show active" id="london" role="tabpanel" aria-labelledby="london-tab">
              <div class="m-2">
                <label for="units" class="form-label">Number of Neurons:</label>
                <input type="number" class="form-control" min="1" value="50" id="units" placeholder="Number Of Units" oninput="createneurons()">
                <p class="text-muted"> Example: higher the neurons higher the calculations  </p>

              </div>
                
              <div class="m-2">
                <label for="inputshape" class="form-label">Labels (Inputs):</label>
                <input type="number" min="2" oninput="createInputs()" value="2" class="form-control" id="inputshape" placeholder="Number Of Input Shape">
                <p class="text-muted"> Example: house price pridiction has , 'area' and 'room' are 2 inputs and price is to be predicted  </p>
              </div>
    
              <div id="params" class="px-2" style="display: grid; grid-template-columns: repeat(4, 1fr); grid-gap: 10px;"></div>
              <button class="btn btn-warning btn-lg m-2" onclick="processCSV()">PREDICT</button><br>

            </div>
            <div class="tab-pane " id="paris" role="tabpanel" aria-labelledby="paris-tab">
              <div class="m-2">
              <div class="mb-3 ">

                <label for="activation">Activation Function</label>
                <select class="form-select" id="activation">
                  <option  value="sigmoid">Sigmoid</option>
                  <option selected value="relu">ReLU</option>
                  <option value="tanh">Tanh</option>
                  <!-- Add more activation functions as needed -->
                </select>
              </div>
              
              <div class="mb-3">
                <label for="learningRate">Learning Rate</label>
                <input type="number" step="0.01" value="0.01" class="form-control" id="learningRate">
              </div>

              <div class="mb-3">
                <label for="epochs">Epochs</label>
                <input type="number" step="1" value="1000" class="form-control" id="epochs">
              </div>
              <div class="mb-3">
                <label for="algorithmSelect">Select Training Algorithm:</label>
                <select class="form-select" id="algorithmSelect">
                  <option value="sgd">Stochastic Gradient Descent (SGD)</option>
                  <option value="adam">Adam</option>
                  <option value="rmsprop">RMSprop</option>
                  <!-- Add more training algorithms as needed -->
                </select>
              </div>
            </div>
            </div>
            <div class="tab-pane " id="tokyo" role="tabpanel" aria-labelledby="tokyo-tab">
              <div class="p-2 m-2 border rounded bg-dark" style="color: white;">

                <input class="my-2" type="file" id="model" accept=".bin" /><br>
              </div>
            </div>

            <div class="tab-pane " id="csv" role="tabpanel" aria-labelledby="csv-tab">
              <textarea class="form-control  " id="output" rows="10" style="white-space: pre-wrap;"></textarea>          </div>

            </div>

            
          <hr>

          <div class="px-2" style="">
            <p class="m-0"> After Prediction Of Your ML Model It Will Be Saved In The Downloads Folder. ðŸ˜Š </p>
          </div>
          <h3 class="m-2 mb-3" id="prediction"></h3>

          </div>
        







         
      </div>

      <div class="col-md-6">
        <!-- Neurons -->
        <div class="d-flex flex-column p-3  bg-light" id="neuronContainer" style="border-radius: 1rem;">  </div>
      </div>
    </div>


   
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>



<script>
  addEventListener("load", (event) => { createInputs()
    createneurons()
    getcsv()
  });




 function getname(){
  console.log('yes')
  const fileInput = document.getElementById("csvFile");


    var filename = fileInput.files[0].name;
    document.getElementById("file").innerText = filename;

    const reader = new FileReader();
    reader.onload = function(event) {
      const fileContent = event.target.result;
      document.getElementById('output').innerText = fileContent;
    };

    reader.readAsText(fileInput.files[0]);


 }

function getcsv() {
  console.log('click');
  const fileInput = document.getElementById("csvFile");

  fileInput.click();




}
</script>



<script>


  async function processCSV() {



    var inputCount = 0;
    var inputs = [];

    while (true) {
      var inputId = "input" + inputCount;
      var inputElement = document.getElementById(inputId);
      
      if (!inputElement) {
        break; // Exit the loop if there are no more inputs with the current ID
      }
      
      inputs.push(parseFloat(inputElement.value));
      inputCount++;
    }
    console.log(inputs);



        const units = parseInt(document.getElementById("units").value);
        const inputshape = parseInt(document.getElementById("inputshape").value);
        const learningrate = parseFloat(document.getElementById("learningRate").value);
        const epochs = parseFloat(document.getElementById("epochs").value);

        const activation = document.getElementById("activation").value;


        var values = []


        document.getElementById('prediction').innerHTML = `
  <div class="spinner-border" role="status">
  </div>  
`;

         const csvFile = document.getElementById("csvFile");
         const input = csvFile.files[0];
         const reader = new FileReader();

         reader.onload = async function (e) {
            const text = e.target.result;
             document.getElementById('output').innerText = text;

            const lines = text.split('\n');
            const xs = [];
            const ys = [];

            for (let i = 1; i < lines.length; i++) {
               const [length, area, price] = lines[i].split(',').map(parseFloat);
               if (isNaN(length) || isNaN(area) || isNaN(price)) {
                  console.log('Invalid data point:', lines[i]);
                  continue;
               }
               xs.push([length , area]); // normalize input data
               ys.push([price]); // normalize target data
            }

            const xsMean = tf.mean(tf.tensor2d(xs), 0);
            const xsStd = tf.sqrt(tf.mean(tf.square(tf.sub(tf.tensor2d(xs), xsMean)), 0));

            const ysMean = tf.mean(tf.tensor2d(ys), 0);
            const ysStd = tf.sqrt(tf.mean(tf.square(tf.sub(tf.tensor2d(ys), ysMean)), 0));

            // Normalize the training data
            const normalizedXs = tf.div(tf.sub(tf.tensor2d(xs), xsMean), xsStd);
            const normalizedYs = tf.div(tf.sub(tf.tensor2d(ys), ysMean), ysStd);


            // Create a TensorFlow.js model
            const model = tf.sequential();
            model.add(tf.layers.dense({ units: units, inputShape: [inputshape], activation: activation }));
            model.add(tf.layers.dense({ units: 1 }));

            model.compile({ loss: 'meanSquaredError', optimizer: tf.train.sgd(learningrate) });

            // Train the model
            await model.fit(normalizedXs, normalizedYs, { epochs: epochs });

            // Normalize an arbitrary input value for prediction
            const input = [56, 3.3]; // Example input values
            const normalizedInput = tf.div(tf.sub(tf.tensor1d(inputs), xsMean), xsStd);

            // Predict the price
            const normalizedPrediction = model.predict(normalizedInput.reshape([1, 2]));
            const denormalizedPrediction = tf.mul(normalizedPrediction, ysStd).add(ysMean);
            const price = denormalizedPrediction.dataSync()[0];

            console.log('Predicted price:', price);
            document.getElementById('prediction').innerText = 'Prediction : ' + price;

            await model.save('downloads://my_model');
            console.log('Model saved.');

         };

         reader.readAsText(input);
      }






      function createInputs() {
        const inputShape = parseInt(document.getElementById("inputshape").value);
        const neuronCount = parseInt(document.getElementById("units").value);
        const div = document.getElementById('params');
        
        const inputContainer = document.createElement("div");
        inputContainer.classList.add("d-flex", "flex-column", "p-3", "bg-light", "align-items-end");

        // Clear the existing inputs and circles
        div.innerHTML = "";
        inputContainer.innerHTML = "";

        // Create and append the input fields
        for (let index = 0; index < inputShape; index++) {
          const input = document.createElement("input");
          input.type = "text";
          input.id = "input" + index;
          input.className = 'form-control';
          input.placeholder = "Value To Predict" + (index + 1);
          div.appendChild(input);
        }

        // Create and append the SVG circles for inputs
      
      }




    function createneurons() {
        const neuronCount = parseInt(document.getElementById("units").value);
        const neuronContainer = document.getElementById("neuronContainer");

        // Clear the existing circles
        neuronContainer.innerHTML = "";

        // Create and append the SVG circles
        for (let i = 0; i < neuronCount; i++) {
          const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
          svg.setAttribute("class", "neuron-circle");
          svg.setAttribute("viewBox", "0 0 24 24");
          svg.innerHTML = ` <defs>
        <linearGradient id="neuron-gradient" gradientTransform="rotate(90)">
          <stop offset="0%" stop-color="white" />
          <stop offset="60%" stop-color="green" />
        </linearGradient>
      </defs>
      <circle cx="12" cy="12" r="8" stroke="#000" stroke-width="1" fill="#F5F5F5"></circle>`;
          neuronContainer.appendChild(svg);
        }
      }


</script>






</html>