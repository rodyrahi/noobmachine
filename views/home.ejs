<!DOCTYPE html>
<html lang="en">

<%- include('./partials/header.ejs') %>


<style>


    .noob-heading {
      font-family: 'Oswald', sans-serif;
    }
    .neuron-circle {
  width: 30px;
  height: 30px;
  margin: 1px;
  align-self: center;
}

.neuron-circle svg {
  width: 100%;
  height: 100%;
}

.neuron-circle circle {
  fill: url(#neuron-gradient);
  stroke: #000;
  stroke-width: 1;
}


#neuronContainer {
  height: 90vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-end;
  padding: 30px;
  background-color: #F5F5F5;
  border-radius: 1rem;
}



    .image-container img {
      transition: filter 0.3s ease;
    }

    .image-container:hover img {
      filter: invert(100%);
      cursor: pointer;
    }



    body {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      padding: 0;
    }
    .ann-svg {
      max-width: 100%;
      height: auto;
    }

    .node {
      fill: #3b7dff; /* Update the fill color here */
      stroke: #828282;
    }




</style>
<body style="background-color: black; font-family: 'Noto Sans JP', sans-serif;">
  <div class="container">
    <div class="row">
      
      <h1 class="text-light m-2 mb-1 noob-heading">NOOB MACHINE</h1>
      <p class="text-light m-2 my-1 " >ARTIFICIAL NEURAL NETWORK</p>
   
      <div class="col-md-6">
        <%- include('./partials/model.ejs') %>

      </div>

      <div class="col-md-6">
        <!-- Neurons -->
        <div class="d-flex flex-column p-3  bg-light" id="neuronContainer" style="border-radius: 1rem;">
          <svg class="ann-svg" id="ann-svg" width="600" height="400"></svg>

        </div>
      </div>
    </div>


   
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>



<script src="model.js"></script>
<script src="visualization.js"></script>


<script>
    // Create a sample ANN model architecture
    const modelArchitecture = [
      { layerType: 'input', units: 4 },
      { layerType: 'dense', units: 8, activation: 'relu' },
      { layerType: 'dense', units: 1, activation: 'sigmoid' }
    ];

// Define the dimensions and positions for visualization
// Define the dimensions and positions for visualization
const width = 600;
const height = 400;
const layerMargin = 100;
const nodeRadius = 10; // Adjust the node radius to make neurons smaller

// Create a SVG container using D3.js
const svg = d3.select('#ann-svg')
  .attr('width', width)
  .attr('height', height);

// Function to draw the ANN layers
function drawANNLayers(modelArchitecture) {
  // Calculate the x-position for each layer
  const layerXPositions = modelArchitecture.map((_, i) => (i + 1) * (width / (modelArchitecture.length + 1)));

  // Draw the layers
  const layers = svg.selectAll('.layer')
    .data(modelArchitecture)
    .enter()
    .append('g')
    .attr('class', 'layer')
    .attr('transform', (_, i) => `translate(${layerXPositions[i]}, ${height / 2})`);

  // Draw the nodes in each layer
  layers.each(function (d, i) {
    const layer = d3.select(this);

    // Calculate the y-position for each node
    const numNodes = d.units;
    const availableWidth = width / (modelArchitecture.length + 1) - 2 * layerMargin;
    const maxNeurons = Math.floor(availableWidth / (2 * nodeRadius));
    const adjustedNodeRadius = Math.min(maxNeurons, nodeRadius, availableWidth / (2 * numNodes));

    const nodeYPositions = d3.range(numNodes).map(j => (j + 1) * (height / (numNodes + 1)) - height / 2);

    // Draw the nodes
    const nodes = layer.selectAll('.node')
      .data(nodeYPositions)
      .enter()
      .append('circle')
      .attr('class', 'node')
      .attr('cx', 0)
      .attr('cy', d => d)
      .attr('r', adjustedNodeRadius*-1);

    // Add labels to the input layer nodes
    if (i === 0) {
      nodes.each(function () {
        const node = d3.select(this);
        const inputLabel = node.append('text')
          .text('Input')
          .attr('x', adjustedNodeRadius + 5)
          .attr('y', 5);
      });
    }

    // Add labels to the hidden and output layer nodes
    if (i > 0) {
      nodes.each(function () {
        const node = d3.select(this);
        const activationLabel = node.append('text')
          .text(d.activation)
          .attr('x', adjustedNodeRadius + 5)
          .attr('y', 5);
      });
    }
  });
}
    // Draw the ANN layers


</script>





<script>
  addEventListener("load", (event) => { createInputs()
  // createneurons()
  getcsv()

      const units = parseInt(document.getElementById("units").value);
      const inputshape = parseInt(document.getElementById("inputshape").value);
      const learningrate = parseFloat(document.getElementById("learningRate").value);
      const epochs = parseFloat(document.getElementById("epochs").value);
      const activation = document.getElementById("activation").value;


  const modelArchitecture = [
      { layerType: 'input', units: inputshape },
      { layerType: 'dense', units: units, activation: activation },
      { layerType: 'dense', units: 1, activation: 'sigmoid' }
    ];


    drawANNLayers(modelArchitecture);


  });

  const input1 = document.getElementById('units');
const input2 = document.getElementById('inputshape');
const input3 = document.getElementById('activation');

// Add event listeners to the input elements
input1.addEventListener('input', handleInputChange);
input2.addEventListener('input', handleInputChange);
input3.addEventListener('input', handleInputChange);

// Function to handle input change
function handleInputChange(event) {
  const units = parseInt(input1.value);
  const inputshape = parseInt(input2.value);
  const activation = input3.value;

  const modelArchitecture = [
    { layerType: 'input', units: inputshape },
    { layerType: 'dense', units: units, activation: activation },
    { layerType: 'dense', units: 1, activation: 'sigmoid' }
  ];

  drawANNLayers(modelArchitecture);
}

// Call the function to draw the initial ANN layers
handleInputChange();







  function getname(){
  console.log('yes')
  const fileInput = document.getElementById("csvFile");

  var input = fileInput.files[0];

  var filename = fileInput.files[0].name;
  document.getElementById("file").innerText = filename;

  const reader = new FileReader();
  reader.onload = function(event) {
    const fileContent = event.target.result;


    dfd.readCSV(input) //assumes file is in CWD
              .then(df => {
                //  document.getElementById('output').innerText = df.table();

                // df.plot("output").table()
                df.plot("plot_div").table()
              }).catch(err=>{
                console.log(err);
              })




    const lines = fileContent.split('\n');



    for (let i = 1; i < lines.length; i++) {
        const data = lines[i].split(',').map(parseFloat);
        if (data.some(isNaN)) {

          console.log('Invalid data point:', lines[i]);
          continue;
        }
        
        const features = data.slice(0, -1); // Extract all but the last element as features
        const target = [data[data.length - 1]]; // Last element is the target
        const header = lines[0].split(",");

              
        document.getElementById("inputshape").value = features.length;

        createInputs(features.length , header)

      }






  };

  reader.readAsText(fileInput.files[0]);


  }

  function getcsv() {
  console.log('click');
  const fileInput = document.getElementById("csvFile");
  fileInput.click();
  }
</script>



<script>



  function createInputs(inputShape , features) {
        // const inputShape = parseInt(document.getElementById("inputshape").value);
        const neuronCount = parseInt(document.getElementById("units").value);
        const div = document.getElementById('params');
        
        const inputContainer = document.createElement("div");
        inputContainer.classList.add("d-flex", "flex-column", "p-3", "bg-light", "align-items-end");

        // Clear the existing inputs and circles
        div.innerHTML = "";
        inputContainer.innerHTML = "";

        // Create and append the input fields
        for (let index = 0; index < inputShape; index++) {
          const input = document.createElement("input");
          input.type = "text";
          input.id = "input" + index;
          input.className = 'form-control';
          input.placeholder = features[index];
          div.appendChild(input);
        }

        // Create and append the SVG circles for inputs
      
      }
  
  // function createneurons() {
  //       const neuronCount = parseInt(document.getElementById("units").value);
  //       const neuronContainer = document.getElementById("neuronContainer");

  //       // Clear the existing circles
  //       neuronContainer.innerHTML = "";

  //       // Create and append the SVG circles
  //       for (let i = 0; i < neuronCount; i++) {
  //         const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  //         svg.setAttribute("class", "neuron-circle");
  //         svg.setAttribute("viewBox", "0 0 24 24");
  //         svg.innerHTML = ` <defs>
  //       <linearGradient id="neuron-gradient" gradientTransform="rotate(90)">
  //         <stop offset="0%" stop-color="white" />
  //         <stop offset="60%" stop-color="green" />
  //       </linearGradient>
  //     </defs>
  //     <circle cx="12" cy="12" r="8" stroke="#000" stroke-width="1" fill="#F5F5F5"></circle>`;
  //         neuronContainer.appendChild(svg);
  //       }
  //     }


</script>






</html>