<!DOCTYPE html>
<html lang="en">

<%- include('./partials/header.ejs') %>


<style>


    .noob-heading {
      font-family: 'Oswald', sans-serif;
    }
    .neuron-circle {
  width: 30px;
  height: 30px;
  margin: 1px;
  align-self: center;
}

.neuron-circle svg {
  width: 100%;
  height: 100%;
}

.neuron-circle circle {
  fill: url(#neuron-gradient);
  stroke: #000;
  stroke-width: 1;
}


#neuronContainer {
  height: 90vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-end;
  padding: 30px;
  background-color: #F5F5F5;
  border-radius: 1rem;
}



    .image-container img {
      transition: filter 0.3s ease;
    }

    .image-container:hover img {
      filter: invert(100%);
      cursor: pointer;
    }
    .image-selected img {
      filter: invert(100%);
      cursor: pointer;
    }



    body {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      padding: 0;
    }
    .ann-svg {
      max-width: 100%;
      height: auto;
    }

    .node {
      fill: #3b7dff; /* Update the fill color here */
      stroke: #828282;
    }




</style>
<body style="background-color: black; font-family: 'Noto Sans JP', sans-serif;">
  <div class="container" style="height: inherit;">
    <div class="row">
      <div class="" style="display: flex; position: relative;">
        <div class="">
          <h1 class="text-light m-2 mb-1 noob-heading">NOOB MACHINE</h1>
          <p class="text-light m-2 my-1">ARTIFICIAL NEURAL NETWORK</p>
        </div>
        <div class="bg-danger mt-3 p-2 rounded border" style="color: rgb(255, 255, 255); position: absolute; bottom: 1rem; right: 3rem;">
          <div class="right-div ">
            Credits <%= locals.credits %>
          </div>
        </div>
      </div>
      
      
      <div class="col-md-6">
        <%- include('./partials/model.ejs' , {name:locals.name , isAuthenticated:isAuthenticated , api:locals.api , credits:locals.credits}) %>

      </div>

      <div class="col-md-6">
        <!-- Neurons -->
        <div class="d-flex flex-column p-3  bg-light" id="neuronContainer" style="border-radius: 1rem;">
          <svg class="ann-svg" id="ann-svg" width="600" height="400"></svg>

        </div>
      </div>
    </div>


   
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>



<script src="model.js" style=" " ></script>
<script src="visualization.js"></script>
<script src="uploadmodel.js"></script>












<script>
  addEventListener("load", (event) => { 
    createInputs()

  getcsv()

      const units = parseInt(document.getElementById("units").value);
      const inputshape = parseInt(document.getElementById("inputshape").value);
      const learningrate = parseFloat(document.getElementById("learningRate").value);
      const epochs = parseFloat(document.getElementById("epochs").value);
      const activation = document.getElementById("activation").value;


  const modelArchitecture = [
      { layerType: 'input', units: inputshape },
      { layerType: 'dense', units: units, activation: activation },
      { layerType: 'dense', units: 1, activation: 'sigmoid' }
    ];


    drawANNLayers();


  });












  function getname(){
  console.log('yes')
  const fileInput = document.getElementById("csvFile");

  var input = fileInput.files[0];

  var filename = fileInput.files[0].name;
  document.getElementById("file").innerText = filename;


  if (  fileInput.files.length > 0) {

    document.getElementById("image-container").classList.add('image-selected');

  }
  const reader = new FileReader();
  reader.onload = function(event) {
    const fileContent = event.target.result;
    
   
    dfd.readCSV(input) //assumes file is in CWD
              .then(df => {
                //  document.getElementById('output').innerText = df.table();

                // df.plot("output").table()
              df.plot("plot_div").table()

              df.plot("line_div").line()})
          


    const lines = fileContent.split('\n');



    for (let i = 1; i < lines.length; i++) {
        const data = lines[i].split(',').map(parseFloat);
        if (data.some(isNaN)) {

          console.log('Invalid data point:', lines[i]);
          continue;
        }
        
        const features = data.slice(0, -1); // Extract all but the last element as features
        const target = [data[data.length - 1]]; // Last element is the target
        const header = lines[0].split(",");

              
        document.getElementById("inputshape").value = features.length;

        createInputs(features.length , header)

      }


      drawANNLayers()



  };

  reader.readAsText(fileInput.files[0]);


  }








  function getcsv() {
  console.log('click');
  const fileInput = document.getElementById("csvFile");
  fileInput.click();


  }
</script>



<script>



  function createInputs(inputShape , features) {
        // const inputShape = parseInt(document.getElementById("inputshape").value);
        const neuronCount = parseInt(document.getElementById("units").value);
        const div = document.getElementById('params');
        
        const inputContainer = document.createElement("div");
        inputContainer.classList.add("d-flex", "flex-column", "p-3", "bg-light", "align-items-end");

        // Clear the existing inputs and circles
        div.innerHTML = "";
        inputContainer.innerHTML = "";

        // Create and append the input fields
        for (let index = 0; index < inputShape; index++) {
          const input = document.createElement("input");
          input.type = "text";
          input.id = "input" + index;
          input.className = 'form-control';
          input.placeholder = features[index];
          div.appendChild(input);
          document.getElementById('appcols').innerText = div.innerHTML



        }

  
      
      }



</script>





</html>